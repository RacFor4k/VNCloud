@page "/cloud"
@rendermode InteractiveWebAssembly
@inject IJSRuntime JS
@inject NavigationManager Navigation


@using BlazorApp3.Client.Modules
@using Microsoft.AspNetCore.WebUtilities
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json.Nodes
@using System.Text
@using System.Net.Mime


<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>
        <InputText @bind-Value="newFileName" class="mt-3 form-control" placeholder="Введите новое имя..."/>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Закрыть</Button>
        <Button Color="ButtonColor.Primary" @onclick="RenameFile">Сохранить имя</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomLeft" />
<div >
    
    @foreach (var route in routes.Split('/'))
    {
        
        <a class="d-inline h-5" style="text-decoration:none;" onclick="@GoToFolder(new FileInfo(routes.Substring(0,routes.Split(route)[0].Length + route.Length - 2),true,JS, Convert.FromBase64String(userdata.Split(';')[1])))"> @route </a>
        <p class="d-inline h-5" style="text-decoration:none;"> > </p>
    }
    
</div>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Имя файла</th>
                    <th class="text-right">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in files)
                {
                    <tr class="rounded-lg" @ondblclick="()=>DbClikOnFile(file)">
                        <td class="rounded-lg align-middle h5"><Icon Name="@(file.IsFolder ? IconName.Folder2: IconName.FileEarmark)"/>  @file.Name</td>

                        <td class="d-flex justify-content-end">
                            <Button class="mr-5" @onclick="@(() => DownloadFile(file))">
                                <Icon Name="IconName.Download"/>
                            </Button>
                            @*<Button class="mr-5" @onclick="@(() => EditFile(file))">
                                <Icon Name="IconName.PencilSquare"/>
                            </Button>*@
                            <Button class="mr-5" @onclick="@(() => DeleteFile(file))">
                                <Icon Name="IconName.Trash3"/>
                            </Button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


@code {
    private IList<FileInfo> files = new List<FileInfo>();

    private Modal modal = default!;
    private string routes = "Cloud/";
    static string host;
    private FileInfo currentFile;
    private string newFileName;
    string userdata = "";


    private async Task<string> GetJWT()
    {

        if (!string.IsNullOrWhiteSpace(userdata))
        {
            var dataArray = userdata.Split(';', 2);
            if (dataArray.Length == 2)
                return dataArray[1];
        }
        return null;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrWhiteSpace(await JS.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false)))
        {
            Navigation.NavigateTo("/");
        }
        if (firstRender)
        {
            
                await JS.InvokeVoidAsync("import", "./js/encoder.js");
            
            userdata = await JS.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        }
        await GoToFolder(new FileInfo(host, true, JS, Convert.FromBase64String(userdata.Split(';')[1])));
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EditFile(FileInfo file)
    {
        currentFile = file;
        newFileName = file.Name.Split('.')[0];// Открыть модальное окно для ввода нового имени файла
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(string name) => messages.Add(new ToastMessage
        {
            Type = ToastType.Secondary,
            Title = "Файл был удалён",
            HelpText = $"",
            Message = $"Файл {name} был удалён",
        });

    private async Task DownloadFile(FileInfo file)
    {
        // Здесь должен быть код для скачивания файла
        JsonObject json = new JsonObject();
        json.Add("path", file.Road);
        routes = file.Road;
        json.Add("login", JsonNode.Parse(userdata.Split(';')[0]));

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri(User.HttpClient.BaseAddress + "/api/DownloadFile"),
                Content = new StringContent(json.ToJsonString(), Encoding.UTF8, MediaTypeNames.Text.Plain),
            };
        request.Headers.Add("Authorization", "Bearer " + await GetJWT());
        var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
        await JS.InvokeVoidAsync("downloadFileFromStream", file.Name, new EncoderStream(JS, Convert.FromBase64String(userdata.Split(';')[0])).GetDecodeStream());
        var responseBody = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
    }

    private void DeleteFile(FileInfo file)
    {
        files.Remove(file);
        ShowMessage(file.Name);
        // Здесь должен быть код для удаления файла
    }

    private async Task DbClikOnFile(FileInfo file)
    {
        if (file.IsFolder)
        {
            await GoToFolder(file);
            //User.httpClient.GetAsync((User.HttpClient.BaseAddress + "/api/GetData", new HttpCompletionOption (json.ToJsonString()))

        }
        else
        {
            DownloadFile(file);
        }
    }

    private async Task GoToFolder(FileInfo file)
    {
        JsonObject json = new JsonObject();
        json.Add("path", file.Road);
        routes = file.Road;
        json.Add("login", JsonNode.Parse(User.Login));

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri(User.HttpClient.BaseAddress + "/api/GetData"),
                Content = new StringContent(json.ToJsonString(), Encoding.UTF8, MediaTypeNames.Text.Plain),
            };
        request.Headers.Add("Authorization", "Bearer " + await GetJWT());
        var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync().ConfigureAwait(false);

        files = Parse(responseBody);
    }

    private List<FileInfo> Parse(string sourse)
    {
        string[] files = sourse.Split('\n');
        List<FileInfo> filesInfo = new List<FileInfo>();
        foreach(var file in files)
        {
            filesInfo.Add(new FileInfo(file.Split('?')[0], Convert.ToBoolean(file.Split('?')[1]), JS, Convert.FromBase64String(userdata.Split(';')[1])));
        }
        return filesInfo;
    }


    private async Task RenameFile()
    {
        // Здесь должен быть код для переименования файла на сервере
        // Например, отправка запроса на API для переименования файла
        // После успешного переименования обновить список файлов
        if (currentFile.IsFolder)
        {
            currentFile.Name = newFileName;
        }
        else
        {
            currentFile.Name = newFileName + '.' + currentFile.Name.Split('.')[1];
        }
        Console.WriteLine(currentFile.Name);
        UpdateFilesList();
        await modal.HideAsync();
    }
    private void UpdateFilesList()
    {
        // Обновить список файлов после переименования
    }

    public class FileInfo
    {
        public string Name { get; set; }
        public bool IsFolder { get; set; }
        public string Road { get; set; }
        // Другие свойства файла
        public FileInfo(string road, IJSRuntime? JS, byte[] code){
            Road = road.Split(host)[0];
            int ls = road.LastIndexOf('/');
            BlazorApp3.Client.Modules.Encoder encoder = new BlazorApp3.Client.Modules.Encoder(JS, code);
            Name =  road.Substring(++ls, road.Length-ls);
            IsFolder = false; 
            if (Name.IndexOf('.') == -1){
                IsFolder = true;

            }

        }

        public FileInfo(string road, bool isFolder, IJSRuntime JS, byte[] code)
        {
            Road = road.Split(host)[0];
            int ls = road.LastIndexOf('/');
            BlazorApp3.Client.Modules.Encoder encoder = new BlazorApp3.Client.Modules.Encoder(JS, code);
            byte[] buffer = Convert.FromBase64String(road.Substring(++ls, road.Length - ls));
            encoder.Decode(buffer);
            Name = Encoding.UTF8.GetString(buffer);
            IsFolder = false;
            

        }
    }
}


