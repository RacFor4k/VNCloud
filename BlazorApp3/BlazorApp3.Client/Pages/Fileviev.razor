@page "/cloud"
@rendermode InteractiveWebAssembly
@inject IJSRuntime JS
@inject NavigationManager Navigation


@using BlazorApp3.Client.Modules
@using BlazorApp3.Client.Modules.Common.Vars.Http
@using Microsoft.AspNetCore.WebUtilities
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json.Nodes
@using System.Text
@using System.Net.Mime


<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>
        <InputText @bind-Value="newFileName" class="mt-3 form-control" placeholder="Введите новое имя..."/>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Закрыть</Button>
        <Button Color="ButtonColor.Primary" @onclick="RenameFile">Сохранить имя</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomLeft" />
<div >
    
    @foreach (var route in routes.Split('/'))
    {
        
        <a class="d-inline h-5" style="text-decoration:none;" > @route </a>
        <p class="d-inline h-5" style="text-decoration:none;"> > </p>
    }
    <InputFile OnChange="@LoadFile"></InputFile>
</div>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Имя файла</th>
                    <th class="text-right">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in files)
                {
                    <tr class="rounded-lg" @ondblclick="()=>DbClikOnFile(file)">
                        <td class="rounded-lg align-middle h5"><Icon Name="@(file.IsFolder ? IconName.Folder2: IconName.FileEarmark)"/>  @file.Name</td>

                        <td class="d-flex justify-content-end">
                            <Button class="mr-5" @onclick="@(() => DownloadFile(file))">
                                <Icon Name="IconName.Download"/>
                            </Button>
                            @*<Button class="mr-5" @onclick="@(() => EditFile(file))">
                                <Icon Name="IconName.PencilSquare"/>
                            </Button>*@
                            <Button class="mr-5" @onclick="@(() => DeleteFile(file))">
                                <Icon Name="IconName.Trash3"/>
                            </Button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


@code {
    private IList<FileInfo> files = new List<FileInfo>();

    private Modal modal = default!;
    private string routes = "Cloud\\";
    static string host ="host\\";
    private FileInfo currentFile;
    private string newFileName;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await JS.InvokeVoidAsync("import", "./js/encoder.js");
            await JS.InvokeVoidAsync("import", "./js/StreamAPI.js");
            try
            {
                User.Login = Encoding.UTF8.GetBytes(await JS.InvokeAsync<string>("sessionStorage.getItem", "userLogin").ConfigureAwait(false));
                User.Jwt = await JS.InvokeAsync<string>("sessionStorage.getItem", "userjwt").ConfigureAwait(false);
                User.Key = Encoding.UTF8.GetBytes(await JS.InvokeAsync<string>("sessionStorage.getItem", "userKey").ConfigureAwait(false));
                Console.WriteLine(User.Jwt);
            }
            catch
            {
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "userLogin").ConfigureAwait(false);
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "userJwt").ConfigureAwait(false);
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "userKey").ConfigureAwait(false);
            }

        }
        await GoToFolder(new FileInfo(host, true, JS, User.Key));
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EditFile(FileInfo file)
    {
        currentFile = file;
        newFileName = file.Name.Split('.')[0];// Открыть модальное окно для ввода нового имени файла
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(string name) => messages.Add(new ToastMessage
        {
            Type = ToastType.Secondary,
            Title = "Файл был удалён",
            HelpText = $"",
            Message = $"Файл {name} был удалён",
        });

    private async Task DownloadFile(FileInfo file)
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, User.HttpClient.BaseAddress + APIUrl.FileAPI.download);
        request.Headers.Add("Login",Encoding.UTF8.GetString(User.Login));
        request.Headers.Add("Path", file.Road);
        request.Headers.Add("Authorization", "Bearer " + User.Jwt);
        var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        if (response.IsSuccessStatusCode)
        {
            //Реализация сохранения файла из потока

        }
    }

    private void DeleteFile(FileInfo file)
    {
        files.Remove(file);
        ShowMessage(file.Name);
        // Здесь должен быть код для удаления файла
    }

    private async Task DbClikOnFile(FileInfo file)
    {
        if (file.IsFolder)
        {
            await GoToFolder(file);
            //User.httpClient.GetAsync((User.HttpClient.BaseAddress + "/api/GetData", new HttpCompletionOption (json.ToJsonString()))

        }
        else
        {
            DownloadFile(file);
        }
    }

    //Переход по папкам на сервере
    private async Task GoToFolder(FileInfo file)
    {


        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, User.HttpClient.BaseAddress + APIUrl.DataBaseAPI.getData);
        request.Headers.Add("Login", Encoding.UTF8.GetString(User.Login));
        request.Headers.Add("Path", await file.GetEncodedPath());
        request.Headers.Add("Authorization", "Bearer " + User.Jwt);
        var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        if (response.IsSuccessStatusCode)
        {
            byte[] buffer = new byte[0];
            buffer = await response.Content.ReadAsByteArrayAsync();
            var responseBody = Encoding.UTF8.GetString(buffer);
            var status = responseBody.Split(";")[0].Split('.');
            responseBody = responseBody.Substring(responseBody.IndexOf(';') + 1);
            if (status[0] != "problem")
            {
                files = Parse(responseBody);
            }
        }
    }

    private List<FileInfo> Parse(string sourse)
    {
        string[] files = sourse.Split('\n');
        List<FileInfo> filesInfo = new List<FileInfo>();
        foreach(var file in files)
        {
            filesInfo.Add(new FileInfo(file.Split('?')[0], Convert.ToBoolean(file.Split('?')[1]), JS, User.Key));
        }
        return filesInfo;
    }


    private async Task RenameFile()
    {
        // Здесь должен быть код для переименования файла на сервере
        // Например, отправка запроса на API для переименования файла
        // После успешного переименования обновить список файлов
        if (currentFile.IsFolder)
        {
            currentFile.Name = newFileName;
        }
        else
        {
            currentFile.Name = newFileName + '.' + currentFile.Name.Split('.')[1];
        }
        Console.WriteLine(currentFile.Name);

        await modal.HideAsync();
    }
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        foreach(var file in e.GetMultipleFiles(100))
        {
            var encoder = new Modules.Encoder(JS, User.Key);
            byte[] buff = new byte[0];
            MemoryStream stream = new MemoryStream();
            await file.OpenReadStream(long.MaxValue).CopyToAsync(stream);
            stream = new MemoryStream(await encoder.Encode(stream.ToArray()));
            StreamContent st = new StreamContent(stream);
            var request = new HttpRequestMessage(HttpMethod.Post, User.HttpClient.BaseAddress + APIUrl.FileAPI.upload);
            request.Headers.Add("Login", Encoding.UTF8.GetString(User.Login));
            request.Headers.Add("Path", host + await encoder.EncodeHash(file.Name, System.Security.Cryptography.SHA1.Create().ComputeHash));
            request.Headers.Add("Authorization", "Bearer " + User.Jwt);
            request.Content = st;
            Console.WriteLine(User.Jwt);

            var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        }
    }

    public class FileInfo
    {
        private IJSRuntime JS;
        private byte[] code;
        public string Name { get; set; }
        public bool IsFolder { get; set; }
        public string Road { get; set; }

        public async Task<string> GetEncodedPath()
        {
            if (Road == "\\")
                return Road;
            var road = Road.Substring(5);
            var temp = Road.Split('\\');
            BlazorApp3.Client.Modules.Encoder encoder = new BlazorApp3.Client.Modules.Encoder(JS, code);
            byte[] buffer = new byte[0];
            foreach (var item in temp)
            {
                buffer = Base64UrlTextEncoder.Decode(item);
                buffer = await encoder.Encode(buffer);
                road += Encoding.UTF8.GetString(buffer) + '\\';
            }
            return road;
        }

        // Другие свойства файла
        public FileInfo(string road, IJSRuntime? js, byte[] code){
            this.JS = js;
            this.code = code;
            Road = road.Split(host)[0];
            int ls = road.LastIndexOf('\\');
            BlazorApp3.Client.Modules.Encoder encoder = new BlazorApp3.Client.Modules.Encoder(JS, code);
            Name =  road.Substring(++ls, road.Length-ls);
            IsFolder = false; 
            if (Name.IndexOf('.') == -1){
                IsFolder = true;

            }

        }

        public FileInfo(string road, bool isFolder, IJSRuntime JS, byte[] code)
        {
            if (host != road)
            {
                Road = road.Split("Cloud\\")[1];
                int ls = road.LastIndexOf('\\');
                var temp = Road.Split('\\');
                Road = host;
                BlazorApp3.Client.Modules.Encoder encoder = new BlazorApp3.Client.Modules.Encoder(JS, code);
                byte[] buffer = new byte[0];
                foreach(var item in temp)
                {
                    buffer = Base64UrlTextEncoder.Decode(item);
                    buffer = encoder.Decode(buffer).Result;
                    Road += Encoding.UTF8.GetString(buffer) + '\\';
                }
                Name += Encoding.UTF8.GetString(buffer);
                IsFolder = false;
            }
            else {
                Name = "";
                Road = "\\";
            }

        }
    }
}


