@page "/cloud"
@rendermode InteractiveWebAssembly
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using BlazorApp3.Client.Models
@using BlazorApp3.Models
@using Newtonsoft.Json;
@using BlazorApp3.Client.Modules
@using BlazorApp3.Client.Modules.Common.Vars.Http
@using Microsoft.AspNetCore.WebUtilities
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json.Nodes
@using System.Text
@using System.Net.Mime
@using System.Net.WebSockets


<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>
        <InputText @bind-Value="newFileName" class="mt-3 form-control" placeholder="Введите новое имя..."/>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Закрыть</Button>
        <Button Color="ButtonColor.Primary" @onclick="RenameFile">Сохранить имя</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomLeft" />
<div >
    
    @foreach (var item in route.Split('\\'))
    {
        
        <a class="d-inline h-5" style="text-decoration:none;" > @item </a>
        <p class="d-inline h-5" style="text-decoration:none;"> > </p>
    }
    <InputFile OnChange="@LoadFile"></InputFile>
</div>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Имя файла</th>
                    <th class="text-right">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in files)
                {
                    <tr class="rounded-lg" @ondblclick="()=>DbClikOnFile(file)">
                        <td class="rounded-lg align-middle h5"><Icon Name="@(file.IsFolder ? IconName.Folder2: IconName.FileEarmark)"/>  @file.decoded.Name</td>

                        <td class="d-flex justify-content-end">
                            <Button class="mr-5" @onclick="@(() => DownloadFile(file))">
                                <Icon Name="IconName.Download"/>
                            </Button>
                            @*<Button class="mr-5" @onclick="@(() => EditFile(file))">
                                <Icon Name="IconName.PencilSquare"/>
                            </Button>*@
                            <Button class="mr-5" @onclick="@(() => DeleteFile(file))">
                                <Icon Name="IconName.Trash3"/>
                            </Button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


@code {
    private IList<FileInfo> files = new List<FileInfo>();

    private Modal modal = default!;
    static string route ="host";
    private FileInfo currentFile;
    private string newFileName;
    private ClientFilesystem filesystem = new ClientFilesystem("Host");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await JS.InvokeVoidAsync("import", "./js/encoder.js");
            await JS.InvokeVoidAsync("import", "./js/StreamAPI.js");
            try
            {
                User.Login = Encoding.UTF8.GetBytes(await JS.InvokeAsync<string>("sessionStorage.getItem", "userLogin").ConfigureAwait(false));
                User.Jwt = await JS.InvokeAsync<string>("sessionStorage.getItem", "userjwt").ConfigureAwait(false);
                User.Key = Encoding.UTF8.GetBytes(await JS.InvokeAsync<string>("sessionStorage.getItem", "userKey").ConfigureAwait(false));
                User.Encoder = new Modules.Encoder(JS, User.Key);
            }
            catch
            {
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "userLogin").ConfigureAwait(false);
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "userJwt").ConfigureAwait(false);
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "userKey").ConfigureAwait(false);
                Navigation.NavigateTo("/authenticetion");
            }

        }
        await GoToFolder(FileInfo.GetFromDecoded(route, route, JS, true));
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EditFile(FileInfo file)
    {
        currentFile = file;
        newFileName = file.decoded.Name.Split('.')[0];// Открыть модальное окно для ввода нового имени файла
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }


    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(string name) => messages.Add(new ToastMessage
        {
            Type = ToastType.Secondary,
            Title = "Файл был удалён",
            HelpText = $"",
            Message = $"Файл {name} был удалён",
        });

    private async Task DownloadFile(FileInfo file)
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, User.HttpClient.BaseAddress + APIUrl.FileAPI.download);
        request.Headers.Add("Login",Encoding.UTF8.GetString(User.Login));
        request.Headers.Add("Path", file.encoded.Road);
        request.Headers.Add("Authorization", "Bearer " + User.Jwt);
        var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        if (response.IsSuccessStatusCode)
        {
            //Реализация сохранения файла из потока

        }
    }

    private void DeleteFile(FileInfo file)
    {
        files.Remove(file);
        ShowMessage(file.encoded.Name);
        // Здесь должен быть код для удаления файла
    }

    private async Task DbClikOnFile(FileInfo file)
    {
        if (file.IsFolder)
        {
            await GoToFolder(file);
            //User.httpClient.GetAsync((User.HttpClient.BaseAddress + "/api/GetData", new HttpCompletionOption (json.ToJsonString()))

        }
        else
        {
            DownloadFile(file);
        }
    }

    //Переход по папкам на сервере
    private async Task GoToFolder(FileInfo file)
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, User.HttpClient.BaseAddress + APIUrl.DataBaseAPI.getData);
        request.Headers.Add("Login", Encoding.UTF8.GetString(User.Login));
        request.Headers.Add("Path", file.encoded.Road);
        var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);
        if (response.IsSuccessStatusCode)
        {
            List<RoutesModel>? routes = new List<RoutesModel>();
            routes.AddRange(JsonConvert.DeserializeObject <List<RoutesModel>>(await response.Content.ReadAsStringAsync()));

            if(routes != null)
            {
                foreach(var item in routes)
                {
                    filesystem.Add(item);
                }
                foreach(var item in filesystem[route])
                {
                    FileInfo info = FileInfo.GetFromEncoded(
                            item.Value.PathToHeadStr(),
                            item.Value.Name,
                            JS,
                            item.Value.IsFolder
                            );
                    files.Add(info);
                }
            }
        }
    }

    private async Task RenameFile()
    {
        // Здесь должен быть код для переименования файла на сервере
        // Например, отправка запроса на API для переименования файла
        // После успешного переименования обновить список файлов
        if (currentFile.IsFolder)
        {
            currentFile.decoded.Name = newFileName;
        }
        else
        {
            currentFile.decoded.Name = newFileName + '.' + currentFile.decoded.Name.Split('.')[1];
        }
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Put,User.HttpClient.BaseAddress+APIUrl.FileAPI.rename);
        request.Headers.Add("Login", Encoding.UTF8.GetString(User.Login));
        request.Headers.Add("Path", route);
        request.Headers.Add("Name", currentFile.encoded.Name);
        await currentFile.Encode();
        Console.WriteLine(currentFile.decoded.Name);

        await modal.HideAsync();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        foreach(var file in e.GetMultipleFiles(100))
        {
            ///Old Code
            ///
            /// byte[] buff = new byte[0];
            /// MemoryStream stream = new MemoryStream();
            /// await file.OpenReadStream(long.MaxValue).CopyToAsync(stream);
            /// stream = new MemoryStream(await User.Encoder.Encode(stream.ToArray()));
            /// StreamContent st = new StreamContent(stream);
            /// var request = new HttpRequestMessage(HttpMethod.Post, User.HttpClient.BaseAddress + APIUrl.FileAPI.upload);
            /// request.Headers.Add("Login", Encoding.UTF8.GetString(User.Login));
            /// request.Headers.Add("Path", route + await User.Encoder.EncodeHash(file.Name, System.Security.Cryptography.SHA1.Create().ComputeHash));
            /// request.Headers.Add("Authorization", "Bearer " + User.Jwt);
            /// request.Content = st;
            /// Console.WriteLine(User.Jwt);
            ///
            /// var response = await User.HttpClient.SendAsync(request).ConfigureAwait(false);

            var webSocketUrl = new Uri("wss://your-websocket-server.com/socket");
            using var webSocket = new ClientWebSocket();

            try
            {
                await webSocket.ConnectAsync(webSocketUrl, CancellationToken.None);
                SocketData data = new SocketData();
                data.Content.Type = Models.ContentType.Stream;
                data.Content.Lenght = file.Size;
                data.Content.ChunkSize = 1024;
                data.Headers.Add("Login", Encoding.UTF8.GetString(User.Login));
                data.Headers.Add("Path", route);
                data.Headers.Add("FileName", file.Name);
                await webSocket.SendAsync(new ArraySegment<byte>(Encoding.UTF8.GetBytes(data.ToString())), WebSocketMessageType.Text, true, CancellationToken.None);
                byte[] chunk = new byte[data.Content.ChunkSize];
                long RemSize = data.Content.Lenght;
                while (RemSize >= data.Content.ChunkSize)
                {
                    await webSocket.SendAsync(new ArraySegment<byte>(chunk), WebSocketMessageType.Binary, true, CancellationToken.None);
                    RemSize -= data.Content.ChunkSize;
                }
                if (RemSize > 0)
                {
                    chunk = new byte[RemSize];
                    await webSocket.ReceiveAsync(new ArraySegment<byte>(chunk), CancellationToken.None);
                }
            }
            catch
            {
                
            }

        }
    }

    public class FileInfo
    {
        public struct Info
        {
            public string Name { get; set; }
            public string Road { get; set; }
        }
        public bool IsFolder { get; set; }

        public Info encoded;
        public Info decoded;

        public FileInfo()
        {
            encoded.Name = "";
            encoded.Road = "";
            this.IsFolder = true;
        }

        public static FileInfo GetFromEncoded(string Name, string Road, IJSRuntime js, bool IsFolder = true)
        {
            FileInfo Info = new FileInfo();
            Info.encoded.Name = Name;
            Info.encoded.Road = Road;
            Info.IsFolder = IsFolder;
            Info.Decode(); 
            return Info;
        }

        public static FileInfo GetFromDecoded(string Name, string Road, IJSRuntime js, bool IsFolder = true)
        {
            FileInfo Info = new FileInfo();
            Info.decoded.Name = Name;
            Info.decoded.Road = Road;
            Info.IsFolder = IsFolder;
            Info.Encode();
            return Info;
        }

        public async Task<FileInfo> Decode()
        {
            string[] split = encoded.Road.Split('\\');
            decoded.Road = "";
            for(int i = 0;i<split.Length;i++)
            {
                decoded.Road+=await User.Encoder.Decode(split[i]);
                if (i < split.Length - 1)
                {
                    decoded.Road += '\\';
                }else if (IsFolder)
                {
                    decoded.Road += '\\';
                }
            }

            decoded.Name = await User.Encoder.Decode(decoded.Name);
            return this;
        }
        public async Task<FileInfo> Encode()
        {
            string[] split = decoded.Road.Split('\\');
            encoded.Road = "";
            for (int i = 0; i < split.Length; i++)
            {
                encoded.Road += await User.Encoder.Encode(split[i]);
                if (i < split.Length - 1)
                { 
                    encoded.Road += '\\';
                }
                else if (IsFolder)
                {
                    encoded.Road += '\\';
                }
            }

            encoded.Name = await User.Encoder.Encode(decoded.Name);
            return this;
        }

    }
}


